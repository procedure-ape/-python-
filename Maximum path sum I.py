# 最大路径和 I
# 从下面展示的三角形的顶端出发，不断移动到在下一行与其相邻的元素，能够得到的最大路径和是23。

#    3
#   7 4
#  5 4 1
# 3 2 9 9
# 如上图，最大路径和为 3 + 7 + 4 + 9 = 23。
# 求从下面展示的三角形顶端出发到达底部，所能够得到的最大路径和：

#              75
#             95 64
#            17 47 82
#           18 35 87 10
#          20 04 82 47 65
#         19 01 23 75 03 34
#        88 02 77 73 07 63 67
#       99 65 04 28 06 16 70 92
#      41 41 26 56 83 40 80 70 33
#     41 48 72 33 47 32 37 16 94 29
#    53 71 44 65 25 43 91 52 97 51 14
#   70 11 33 28 77 73 17 78 39 68 17 57
#  91 71 52 38 17 14 91 43 58 50 27 29 48
# 63 66 04 68 89 53 67 30 73 16 69 87 40 31
#04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

data = '75 95 64 17 47 82 18 35 87 10 20 04 82 47 65 19 01 23 75 03 34 88 02 77 73 07 63 67 99 65 04 28 06 16 70 92 41 41 26 56 83 40 80 70 33 41 48 72 33 47 32 37 16 94 29 53 71 44 65 25 43 91 52 97 51 14 70 11 33 28 77 73 17 78 39 68 17 57 91 71 52 38 17 14 91 43 58 50 27 29 48 63 66 04 68 89 53 67 30 73 16 69 87 40 31 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23'
data = data.split(' ')
datas = []
length = len(data)
index = 0
for i in range(1,30):
  if length == 0:
    break
  else:
    datas.append(data[index:index+i])
    index += i
    length -= i

index = 7
peace = []
datas = datas[::-1]
# 从下往上选最大值
for i in datas:
  if(len(i)-1<index):
    index -= 1
    peace.append(i[index])
  elif index == 0:
    peace.append(i[index])
  else:
    if int(i[index]) < int(i[index-1]):
      index -= 1
    peace.append(i[index])

result = 0
for i in peace:
  result += int(i)

print(result)